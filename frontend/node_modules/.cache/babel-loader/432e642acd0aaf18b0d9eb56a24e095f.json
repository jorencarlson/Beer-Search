{"ast":null,"code":"/* Generated by `npm run build`, do not edit! */\n\"use strict\";\n\nvar skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nvar tt = require(\"acorn\").tokTypes;\n\nmodule.exports = function (Parser) {\n  return (\n    /*@__PURE__*/\n    function (Parser) {\n      function anonymous() {\n        Parser.apply(this, arguments);\n      }\n\n      if (Parser) anonymous.__proto__ = Parser;\n      anonymous.prototype = Object.create(Parser && Parser.prototype);\n      anonymous.prototype.constructor = anonymous;\n\n      anonymous.prototype.parseExport = function parseExport(node, exports) {\n        skipWhiteSpace.lastIndex = this.pos;\n        var skip = skipWhiteSpace.exec(this.input);\n        var next = this.input.charAt(this.pos + skip[0].length);\n\n        if (next !== \"*\") {\n          return Parser.prototype.parseExport.call(this, node, exports);\n        }\n\n        this.next();\n        var specifier = this.startNode();\n        this.expect(tt.star);\n\n        if (this.eatContextual(\"as\")) {\n          node.declaration = null;\n          specifier.exported = this.parseIdent(true);\n          this.checkExport(exports, specifier.exported.name, this.lastTokStart);\n          node.specifiers = [this.finishNode(specifier, \"ExportNamespaceSpecifier\")];\n        }\n\n        this.expectContextual(\"from\");\n\n        if (this.type !== tt.string) {\n          this.unexpected();\n        }\n\n        node.source = this.parseExprAtom();\n        this.semicolon();\n        return this.finishNode(node, node.specifiers ? \"ExportNamedDeclaration\" : \"ExportAllDeclaration\");\n      };\n\n      return anonymous;\n    }(Parser)\n  );\n};","map":null,"metadata":{},"sourceType":"script"}